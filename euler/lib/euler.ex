defmodule Euler do
  @moduledoc """
  If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9.
  The sum of these multiples is 23.

  Find the sum of all the multiples of 3 or 5 below 1000.
  """

  @doc """

  ## Examples

      iex> Euler.hello()
      :world

  """
  def hello do
    :world
  end

  @ doc """
  Sum of all multiples of 3 and 5 comprised between 0 and x.
  Th sum is calculated using the simplest non optimised method.
  """
  def sum_of_mult_3_5( n \\ 1000) do
    1..n-1 |> Enum.filter(fn(n) -> Enum.any?([3,5], fn x -> rem(n,x) == 0 end) end) |> Enum.sum()
  end

  @ doc """
  Sum of all multiples of 3 and 5 comprised between 0 and x.
  Th sum is calculated using the simplest non optimised method.
  """
  def sum_of_mult_list(n \\ 1000, l \\ [3,5]) do
    sum1 = for x <- l do
      sum_of_mult(n,x)
    end |> Enum.sum()

    sum2 = for x <- products(l) do
      sum_of_mult(n,x)
    end |> Enum.sum
    sum1 - sum2
  end

  @ doc """
  Sum of all multiples of of m int the range 1..n-1
  The sum is caltulated by using the formula : Sum(1..n) = n * (n+1) / 2
  To calculate the sum of the multiples of m comprised between 1 and n-1,
  we apply the dormula: n/m * (n/m-1) * m.
  when n/m are the result of the the div(n,m) funtion call
  """
  def sum_of_mult(n,m) do
    m2 = div(n-1,m)
    div(m * m2 * (m2+1),2)
  end
  def sum_of_mult_3_5_b( n \\ 1000) do
    sum_of_mult(n, 3) + sum_of_mult(n,5) - sum_of_mult(n,15)
  end


  @ doc """
  return all the pairs {x,y} generated two elements of a list.
  The pairs are not ordered, which means {x,x} is not included, and 
  """
  def pairs(l), do: pairs(l,[])
  def pairs([],pairs_acc), do: pairs_acc

  def pairs([h|t],pairs_acc) do
    pairs1 = for x <- t, do: {h,x}
    pairs(t,pairs_acc ++ pairs1)
  end

  @ doc """
  return the product of the terms etracted form the pairs generated by pairs()
  """
  def products(l) do
    for {x,y} <- pairs(l), do: x*y
  end

end
